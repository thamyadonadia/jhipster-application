package com.library.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReaderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReaderAllPropertiesEquals(Reader expected, Reader actual) {
        assertReaderAutoGeneratedPropertiesEquals(expected, actual);
        assertReaderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReaderAllUpdatablePropertiesEquals(Reader expected, Reader actual) {
        assertReaderUpdatableFieldsEquals(expected, actual);
        assertReaderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReaderAutoGeneratedPropertiesEquals(Reader expected, Reader actual) {
        assertThat(expected)
            .as("Verify Reader auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReaderUpdatableFieldsEquals(Reader expected, Reader actual) {
        assertThat(expected)
            .as("Verify Reader relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getJoinedDate()).as("check joinedDate").isEqualTo(actual.getJoinedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReaderUpdatableRelationshipsEquals(Reader expected, Reader actual) {
        // empty method
    }
}
